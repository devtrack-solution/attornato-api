# ==========================================
# üèóÔ∏è  Build Stage
# ==========================================
FROM node:20-alpine AS build

# Install pnpm globally
RUN npm install -g pnpm

# Set PNPM_HOME manually
ENV PNPM_HOME="/root/.pnpm-store"
ENV PATH="$PNPM_HOME/bin:$PATH"

# Create PNPM home directory manually
RUN mkdir -p $PNPM_HOME

# Install NestJS CLI as a dev dependency (not globally)
WORKDIR /usr/src/app
COPY package.json ./
COPY pnpm-lock.yaml ./
RUN pnpm install

# Copy source code
COPY . .

# Build TypeScript
# RUN pnpm run build

# ==========================================
# üöÄ App Stage (Final Minimal Image)
# ==========================================
FROM node:20-alpine AS app

# Install pnpm globally
RUN npm install -g pnpm

# Set PNPM_HOME manually
ENV PNPM_HOME="/root/.pnpm-store"
ENV PATH="$PNPM_HOME/bin:$PATH"

# Create PNPM home directory manually
RUN mkdir -p $PNPM_HOME

# Install NestJS CLI globally (without pnpm setup)
RUN npm add -g @nestjs/cli

# Set working directory
WORKDIR /usr/src/app

# Copy only necessary files from build stage
# COPY --from=build /usr/src/app/dist /usr/src/app/dist
COPY --from=build /usr/src/app/node_modules /usr/src/app/node_modules
COPY --from=build /usr/src/app /usr/src/app

# Set environment variable
ENV NODE_ENV=DEVELOPMENT

# Start application dynamically based on RUN_DEBUG
CMD ["sh", "-c", "if [ \"$RUN_DEBUG\" = \"true\" ]; then exec pnpm run start:debug; else exec pnpm run start:dev; fi"]
